name: Docker Image CI/CD

on:
  push:
    branches:
      - main

jobs:
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.set_tag.outputs.image_tag }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Generate and Set Image Tag
        id: set_tag
        run: |
          IMAGE_TAG=murali54321/shopping-app:$(date +%Y%m%d%H%M%S)
          echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "Generated tag: $IMAGE_TAG"

      - name: Build and Tag Image
        run: |
          docker buildx build --platform linux/amd64 \
            -t ${{ steps.set_tag.outputs.image_tag }} \
            -t murali54321/shopping-app:latest \
            -f Dockerfile . --load
          docker save -o image.tar ${{ steps.set_tag.outputs.image_tag }}

      - name: Upload Image Artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: image.tar

  test:
    name: Test Docker Image
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Download Image Artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image
          path: .

      - name: Load Docker Image
        run: docker load -i image.tar

      - name: Run Test Container
        run: |
          docker run -d --name test-container ${{ needs.build.outputs.image_tag }}
          sleep 15
          docker ps -a

      - name: Verify Container Status
        run: |
          STATUS=$(docker inspect --format '{{.State.Status}}' test-container)
          if [ "$STATUS" != "running" ]; then
            echo "Container is not running (status: $STATUS)"
            exit 1
          fi

      - name: Cleanup
        if: always()
        run: docker rm -f test-container

  deploy:
    name: Deploy to Docker Hub
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Push Docker Images
        run: |
          docker push ${{ needs.build.outputs.image_tag }}
          docker push murali54321/shopping-app:latest